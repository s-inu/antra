
Encapsulation: hide data implementation; data hiding , flexibility 

Constructor:
1. It is a special method that shares the same name of the class and doesn't have any return types, not even void. 
2. It is used to create an object/instance of the class and initialize the class members. 
3. If there's no constructor in the class, c# compiler will provide a default constructor and it is parameterless. 
4. The constructor can be overloaded. 
5. Constructor can not be inherited. So a constructor can not be overriden. 
6. By default, derived class constructor will make a call to the base class constructor. 

Inheritance: allows one class to inherit from another existing class so that the derived class can reuse, extend and modify the code 
we have in the derived class. 

Employee Management System
Full time Employees : biweekly pay, benefits
Part time Employees : hourly pay 

In Common: Id, Name, Email, Phone, Address; perform work 

In C#, we can only have single inheritance. 

Abstract class: is the class that cannot create any object from it; can contain both abstract and concrete methods 

Sealed class is a class that can not have any child classes. 

Polymorphism: multiple forms

1. Method Overriding: happens between base class and derived class, same method signature including the access modifiers, method name and 
input/output parameters
2. Method Overloading: multiple methods in the same class that has same access modifier, same method name but different input/ouput parameters. 

static: members belong to the class itself instead of any instance
static class: all the members should be static

Static class vs Sealed Class
1. Both can not be inherited. 
2. Sealed class can have instances but static class can not be instantiated. 
3. Sealed class can have both static and non static method but static class can only contain static method. 

Static class vs Abstract class 
1. Both can not be instantiated. 
2. Abstract class should be inherited but static class can not be inherited. 
3. Abstract class can contain both static and non static method but static class can only contain static method. 

Use case of Static class: 
1. provide utilities
2. Create extension method. 
3. Database Configuration  class: db name, server name, port number, connection strings. 
4. Design patterns: Singleton 

Extension Method: they allow to add additional functionalities to the existing tyoe without modifying, deriving or recompiling the original class. 

Syntax of creating custom extension methods:
1. The class that contains extension method must be a static class. 
2. The method itself must be extension method. 
3. First parameter of the extension method must be the type which will be extended. 
4. First parameter must be written after 'this' keyword. 


SOLID Principle: 
O: Open/Closed Principle: objects/entities should be open for extension but closed for modification

Built-in extension method: LINQ stands for Language Integrated Query

Casing Technique:

1. Pascal Casing: first letter of an identifier must be written in uppercase and remaining letter can be written in lower case. 
--use it when naming a class, method, interfaces, namespaces, property, delegates, etc. 
2. Camel Casing: for the first word, all the letters are in the lower case but for the rest of the words, they will follow pascal casing
--variables, objects


















